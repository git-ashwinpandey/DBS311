-- *******************************
-- DBS311 Week 6 NDD Lecture Demo
-- Clint MacDonald
-- Oct 10, 2023
-- PL/SQL - Introduction
-- *******************************

-- PL = Programmable Language (Procedural)

-- Going into the script window (console) 
SET SERVEROUTPUT ON;
-- turns on output into the script window (every working sessions)

-- SAVED (STORED) PROCEDURES (SPs) and Non-Saved Procedures

-- Non-saved to start
-- HELLO WORLD!

BEGIN
    -- output to script window 
    DBMS_OUTPUT.PUT_LINE('Hello World');
END;

-- declaring variables
DECLARE
    playerID INTEGER := 2;
    playerID2 INTEGER := 0;
BEGIN
    DBMS_OUTPUT.PUT_LINE('------------ START ------------');
    
    -- another way to assign a value to a variable
    SELECT 4 INTO playerID2 FROM dual;
    DBMS_OUTPUT.PUT_LINE('The value of playerID is: ' || playerID);
    DBMS_OUTPUT.PUT_LINE('The value of playerID2 is: ' || playerID2);
    
    DBMS_OUTPUT.PUT_LINE('------------  END  ------------');
END;

-- let us use real tables
DECLARE
    pID INTEGER := 1315;        -- IN
    playerName VARCHAR(60);     -- OUT
    regNum NUMBER;              -- OUT
BEGIN
    DBMS_OUTPUT.PUT_LINE('------------ START ------------');
    
    SELECT firstname || ' ' || lastname, regNumber
    INTO playerName, regNum
    FROM players
    WHERE playerid = pID;  -- NOTE: This must return only 1 row.
    -- WHERE UPPER(firstname) = 'ROBERT';  -- ERROR more than one row
    
    DBMS_OUTPUT.PUT_LINE('PlayerID: ' || pID);
    DBMS_OUTPUT.PUT_LINE('Playername: ' || playerName);
    DBMS_OUTPUT.PUT_LINE('registration Number: ' || regNum);
    
    DBMS_OUTPUT.PUT_LINE('------------  END  ------------');
END;


-- like good programmers - we do exception handling
DECLARE
    pID INTEGER := 1315;        -- IN
    playerName VARCHAR(60);     -- OUT
    regNum NUMBER;              -- OUT
BEGIN
    DBMS_OUTPUT.PUT_LINE('------------ START ------------');
    
    SELECT firstname || ' ' || lastname, regNumber
    INTO playerName, regNum
    FROM players
    WHERE UPPER(firstname) = 'ROBERT';  -- ERROR more than one row
    
    DBMS_OUTPUT.PUT_LINE('PlayerID: ' || pID);
    DBMS_OUTPUT.PUT_LINE('Playername: ' || playerName);
    DBMS_OUTPUT.PUT_LINE('registration Number: ' || regNum);
    
    DBMS_OUTPUT.PUT_LINE('------------  END  ------------');
EXCEPTION
    WHEN TOO_MANY_ROWS
        THEN DBMS_OUTPUT.PUT_LINE('ERROR: too many rows were returned!');
    WHEN OTHERS
        THEN DBMS_OUTPUT.PUT_LINE('ERROR: a general error occured!');
END;

-- Let us make our first STORED PROCEDURE
-- SP = STORED PROCEDURE  (prefix)
CREATE OR REPLACE PROCEDURE spHelloWorld AS
    myName VARCHAR(25) := 'Clint MacDonald';
BEGIN
    DBMS_OUTPUT.PUT_LINE('------------ START ------------');
    DBMS_OUTPUT.PUT_LINE('Hello World, my name is' || myName);
    DBMS_OUTPUT.PUT_LINE('------------  END  ------------');
END;
-- executing the above, compiles the code, and stores the resultant as an object in the database

-- now to execute this procedure
BEGIN
    spHelloWorld();
END;
-- 

-- let us use a CRUD statement

-- create a temp table
CREATE TABLE xPeople (
    pID INT    GENERATED BY DEFAULT ON NULL AS IDENTITY    PRIMARY KEY,
    firstName VARCHAR(25) NOT NULL,
    lastName VARCHAR(25) NOT NULL,
    DOB DATE,
    isActive NUMERIC(1) DEFAULT 1 NOT NULL,
    favNum INT CHECK (favNum BETWEEN 0 AND 99)
    );

-- INSERT INTO xPeople VALUES (null, 'Clint', 'MacDonald', TO_DATE('051672','mmddyy'), 1, 16);

INSERT INTO xPeople VALUES (null, 'Clint', 'MacDonald', TO_DATE('051672','mmddyy'), 1, 16);
/*
INJECTION ATTACK
lastname = "'; DELETE FROM xPeople; --"
INSERT INTO xPeople VALUES (null, 'Clint', ''; DELETE FROM xPeople; --', TO_DATE('051672','mmddyy'), 1, 16);
*/

CREATE OR REPLACE PROCEDURE spInsertPeople (
    fName VARCHAR2, -- Note the datatype is different, okay but caution
    lName VARCHAR2,
    dob DATE,
    isActive NUMERIC,
    favNum INT
) AS
newPID INT := 0;  -- declared variable that was never used
BEGIN
    INSERT INTO xPeople VALUES (null, fName, lName, dob, isActive, favNum);
EXCEPTION
    WHEN OTHERS
        THEN DBMS_OUTPUT.PUT_LINE('Insertion failed, an error occured');
END;

-- simulate the software, by executing the procedure
BEGIN
    spInsertPeople('Clint', 'MacDonald', TO_DATE('051672','mmddyy'), 1, 16);
END;

-- scenario of an array of class objects
BEGIN
    spInsertPeople('Bob', 'MacKenzie', TO_DATE('010375','mmddyy'), 1, 7);
    spInsertPeople('Joe', 'Flarety', TO_DATE('082397','mmddyy'), 1, 4);
    spInsertPeople('Robert', 'Wagner', TO_DATE('061159','mmddyy'), 0, 23);
    spInsertPeople('Raj', 'Patel', TO_DATE('111102','mmddyy'), 1, 5);
END;


-- modify procedure
CREATE OR REPLACE PROCEDURE spInsertPeople (
    fName VARCHAR2, -- Note the datatype is different, okay but caution
    lName VARCHAR2,
    dob DATE,
    isActive NUMERIC,
    favNum INT
) AS
newPID INT := 0;
BEGIN
    INSERT INTO xPeople VALUES (null, fName, lName, dob, isActive, favNum);
    
    SELECT pID INTO newPID
    FROM xPeople
    WHERE rownum = 1
    ORDER BY pID DESC;
    
    DBMS_OUTPUT.PUT_LINE('Insert was successful: ' || newPID);
    
EXCEPTION
    WHEN OTHERS
        THEN DBMS_OUTPUT.PUT_LINE('Insertion failed, an error occured');
END;

-- rerun inserts
BEGIN
    spInsertPeople('Bob', 'MacKenzie', TO_DATE('010375','mmddyy'), 1, 7);
    spInsertPeople('Joe', 'Flarety', TO_DATE('082397','mmddyy'), 1, 4);
    spInsertPeople('Robert', 'Wagner', TO_DATE('061159','mmddyy'), 0, 23);
    spInsertPeople('Raj', 'Patel', TO_DATE('111102','mmddyy'), 1, 5);
END;






SELECT * FROM xPeople;










